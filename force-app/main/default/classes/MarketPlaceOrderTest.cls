/**
 * @description       : 
 * @author            : Andre Prasetya
 * @group             : 
 * @last modified on  : 03-09-2022
 * @last modified by  : Andre Prasetya
**/
@isTest
public class MarketPlaceOrderTest {

    @testSetup 
    static void setup() {
        Account acc= new Account(Name ='Test',BP_Number__c = '123456');
        insert acc;
        
        Contact con = new Contact(AccountId=acc.Id, LastName='lastname test', Email='test@mail.com');
        insert con;
        
        Id pbStandardId = Test.getStandardPricebookId();
        
        Pricebook2 pb = new Pricebook2(Name='Marketplace', IsActive = true);
        insert pb;
                
        Product2 prod = new Product2(Name='testprod', Product_Unique_ID__c='prodUniqueNo');
        insert prod;
        
        PricebookEntry pbe1 = new PricebookEntry(Pricebook2Id=pbStandardId, Product2Id=prod.Id, UnitPrice=160000, IsActive = true);
        insert pbe1;

        PricebookEntry pbe2 = new PricebookEntry(Pricebook2Id=pb.Id, Product2Id=prod.Id, UnitPrice=150000, IsActive = true);
        insert pbe2;

        Opportunity oppty = new Opportunity(AccountId=acc.Id, 
                                            Name='test order', 
                                            StageName='Prospecting',
                                            Type='marketplace',
                                            Service_type__c='Licensed', 
                                            Call_Id__c='1122334455', 
                                            Service__c='createorder',
                                            Order_Id__c='ord-2233445566',
                                            CloseDate=date.newInstance(2020, 4, 26),
                                            BP_Number__c='77889900',
                                            Pricebook2Id=pb.Id,
                                            recordtypeid=system.label.RT_Marketplace
                           );
        insert oppty;   


    }
    
    @isTest
    static void testCreateOrder1(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', '');
        jsonBodyMap.put('file_name', 'cof_doc.pdf');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder2(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'content sample');
        jsonBodyMap.put('file_name', 'cof_doc.pdf');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNox');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }
                        
    @isTest
    static void testCreateOrder3(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('bp_number', '456789');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('order_name', 'test order name');
        
        //jsonBodyMap.put('customer_name', 'BizCare LN');
        //jsonBodyMap.put('customer_email', 'test@email.com');
                        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder4(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test1');
        jsonBodyMap.put('customer_email', 'test1@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }
 
    @isTest
    static void testCreateOrder5(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'content sample');
        //jsonBodyMap.put('file_name', 'cof_doc.pdf');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder6(){
        
        Pricebook2 pb = [Select Id, Name From Pricebook2 Where Name='Marketplace'];
        pb.Name = 'Marketplace1';
        update pb;
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('order_name', 'test order name');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
        Pricebook2 pb2 = [Select Id, Name From Pricebook2 Where Name='Marketplace1'];
        pb2.Name = 'Marketplace';
        update pb2;
    }
   
 
    @isTest
    static void testCreateOrder7(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'content sample');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNoxx');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder8(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'content sample');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }
 
    @isTest
    static void testCreateOrder9(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.avi');
        jsonBodyMap.put('mime_type', 'video/x-msvideo');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder10(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.bmp');
        jsonBodyMap.put('mime_type', 'image/bmp');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder11(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.csv');
        jsonBodyMap.put('mime_type', 'text/csv');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder12(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.gif');
        jsonBodyMap.put('mime_type', 'image/gif');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder13(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.jpg');
        jsonBodyMap.put('mime_type', 'image/jpeg');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder14(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.jpg');
        jsonBodyMap.put('mime_type', 'image/x-citrix-jpeg');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }
 
    @isTest
    static void testCreateOrder15(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.doc');
        jsonBodyMap.put('mime_type', 'application/msword');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder16(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.ppt');
        jsonBodyMap.put('mime_type', 'application/vnd.ms-powerpoint');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder17(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.mid');
        jsonBodyMap.put('mime_type', 'audio/midi');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder18(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.docx');
        jsonBodyMap.put('mime_type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder19(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.xlsx');
        jsonBodyMap.put('mime_type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }

    @isTest
    static void testCreateOrder20(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'stringcontent');
        jsonBodyMap.put('file_name', 'cof_doc.pptx');
        jsonBodyMap.put('mime_type', 'application/vnd.openxmlformats-officedocument.presentationml.presentation');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 
        
    }
    
    @isTest
    static void testCreateOrder21(){
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'createorder');
        jsonBodyMap.put('order_id', 'ord-7987271');
        jsonBodyMap.put('order_date', '20190511');
        jsonBodyMap.put('bp_number', '123456');
        jsonBodyMap.put('customer_name', 'lastname test');
        jsonBodyMap.put('customer_email', 'test@mail.com');
        jsonBodyMap.put('order_name', 'test order name');
        jsonBodyMap.put('cof_file', 'content sample');
        jsonBodyMap.put('file_name', 'cof_doc.pdf');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        Map<String,Object> jsonProductMap = new Map<String,Object>();
        jsonProductMap.put('product_id', 'prodUniqueNo');
        jsonProductMap.put('sales_price', 145000);
        jsonProductMap.put('quantity', 2);
        jsonProductMap.put('notes', 'test note product');
        
        List<Map<String,Object>> productList = new List<Map<String,Object>>();
        productList.add(jsonProductMap);
        
        jsonBodyMap.put('product_items', productList);
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'POST';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.createOrder(); 

		//make duplicate
        RestRequest request1 = new RestRequest();
        request1.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request1.httpMethod = 'POST';
        request1.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request1;
        MarketPlaceOrder.createOrder(); 
        
    }


    @isTest
    static void testUpdateOrder1(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'Quotation Final');
        
        jsonBodyMap.put('agreement_file', '');
        jsonBodyMap.put('file_name', 'cof_doc.pdf');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }    

    @isTest
    static void testUpdateOrder2(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'content sample');
        jsonBodyMap.put('file_name', 'cof_doc.pdf');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder3(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'Quotation Final');
        
        jsonBodyMap.put('agreement_file', 'content sample');
        jsonBodyMap.put('mime_type', 'application/pdf');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }    

    @isTest
    static void testUpdateOrder4(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.avi');
        jsonBodyMap.put('mime_type', 'video/x-msvideo');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder5(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.bmp');
        jsonBodyMap.put('mime_type', 'image/bmp');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder6(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.csv');
        jsonBodyMap.put('mime_type', 'text/csv');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder7(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.gif');
        jsonBodyMap.put('mime_type', 'image/gif');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder8(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.jpg');
        jsonBodyMap.put('mime_type', 'image/jpeg');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder9(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.jpg');
        jsonBodyMap.put('mime_type', 'image/x-citrix-jpeg');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder10(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.doc');
        jsonBodyMap.put('mime_type', 'application/msword');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder11(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.ppt');
        jsonBodyMap.put('mime_type', 'application/vnd.ms-powerpoint');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder12(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.mid');
        jsonBodyMap.put('mime_type', 'audio/midi');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder13(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.docx');
        jsonBodyMap.put('mime_type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder14(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.xlsx');
        jsonBodyMap.put('mime_type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      

    @isTest
    static void testUpdateOrder15(){
        Opportunity oppty = [select Id from Opportunity Where Order_Id__c='ord-2233445566'];
        
        Map<String,Object> jsonBodyMap = new Map<String,Object>();
        jsonBodyMap.put('call_id', '5678351425');
        jsonBodyMap.put('type', 'marketplace'); 
        jsonBodyMap.put('service', 'updateorderstatus');
        jsonBodyMap.put('order_id', 'ord-2233445566');        
        jsonBodyMap.put('opportunity_id', oppty.Id);  //'0065D000004zP80QAE'      
        jsonBodyMap.put('order_status', 'ba-approved');
        
        jsonBodyMap.put('agreement_file', 'cntentfile');
        jsonBodyMap.put('file_name', 'cof_doc.pptx');
        jsonBodyMap.put('mime_type', 'application/vnd.openxmlformats-officedocument.presentationml.presentation');
        
        String jsonBody = JSON.serialize(jsonBodyMap);        

        RestRequest request = new RestRequest();
        request.requestUri = Label.MarketplaceEndpoint + Label.MarketplaceUriOrder;
        request.httpMethod = 'PUT';
        request.requestBody = Blob.valueof(jsonBody);
        
        RestContext.request = request;
        MarketPlaceOrder.updateStatus(); 
        
    }      
	
}